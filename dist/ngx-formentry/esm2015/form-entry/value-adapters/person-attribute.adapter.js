import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NodeBase, GroupNode, ArrayNode } from '../form-factory/form-node';
let PersonAttribuAdapter = class PersonAttribuAdapter {
    constructor() { }
    generateFormPayload(form) {
        return this.generateNodePayload(form.rootNode);
    }
    generateNodePayload(rootNode) {
        const nodes = this.getPersonAttributeNodes(rootNode);
        const payload = [];
        nodes.forEach(node => {
            if (node.control.value !== null &&
                node.control.value !== undefined &&
                node.control.value !== '' &&
                node.initialValue !== node.control.value) {
                if (node.question.extras.questionOptions.isSimpleValue === true) {
                    payload.push({
                        attributeType: node.question.extras.questionOptions.attributeType,
                        value: node.control.value
                    });
                }
                else {
                    payload.push({
                        attributeType: node.question.extras.questionOptions.attributeType,
                        hydratedObject: node.control.value
                    });
                }
            }
        });
        return payload;
    }
    populateForm(form, payload) {
        this.populateNode(form.rootNode, payload);
    }
    populateNode(rootNode, payload) {
        if (!Array.isArray(payload)) {
            throw new Error('Expected an array of attributes');
        }
        const nodes = this.getPersonAttributeNodes(rootNode);
        nodes.forEach(node => {
            payload.forEach(element => {
                if (element.attributeType.uuid
                    === node.question.extras.questionOptions.attributeType) {
                    if (element.value.uuid) {
                        node.control.setValue(element.value.uuid);
                        node.initialValue = element.value.uuid;
                    }
                    else {
                        node.control.setValue(element.value);
                        node.initialValue = element.value;
                    }
                }
            });
        });
    }
    getPersonAttributeNodes(rootNode) {
        const results = [];
        this._getPersonAttributesNodes(rootNode, results);
        return results;
    }
    _getPersonAttributesNodes(rootNode, array) {
        if (rootNode.question.extras &&
            rootNode.question.extras.type === 'personAttribute') {
            array.push(rootNode);
        }
        if (rootNode instanceof GroupNode) {
            const node = rootNode;
            // tslint:disable-next-line:forin
            for (const o in node.children) {
                if (node.children[o] instanceof NodeBase) {
                    this._getPersonAttributesNodes(node.children[o], array);
                }
            }
        }
        if (rootNode instanceof ArrayNode) {
            const node = rootNode;
            node.children.forEach(child => {
                this._getPersonAttributesNodes(child, array);
            });
        }
    }
};
PersonAttribuAdapter = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], PersonAttribuAdapter);
export { PersonAttribuAdapter };
//# sourceMappingURL=data:application/json;base64,